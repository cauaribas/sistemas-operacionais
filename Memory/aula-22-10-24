### 1. **Memória Principal - Conceitos Gerais**

- **CPU e RAM (Memória Principal)**: A CPU interage com a memória principal (RAM), enquanto o programa é carregado a partir da memória secundária (HD, SSD) para a memória principal. A memória principal e os registradores da CPU são os únicos componentes diretamente acessíveis pela CPU.
- **Fluxo de Dados na Unidade de Memória**:
    - Fluxo de **endereços + solicitações de leitura**, ou
    - Fluxo de **endereço + dados e solicitações de gravação**.
- **Desempenho**: O acesso aos registradores da CPU é rápido (cerca de 1 ciclo de clock da CPU), enquanto a memória principal pode levar vários ciclos. Esse atraso é minimizado pelo uso de cache entre a memória principal e os registradores.
### 2. **Proteção de Memória**

- **Objetivo**: Garantir que cada processo só acesse endereços dentro do seu próprio espaço de endereço, evitando problemas de segurança e sobreposição de dados.
- **Endereços de Código**:
    - Endereços simbólicos no código-fonte são mapeados para endereços relocáveis durante a compilação e, posteriormente, para endereços absolutos pelo linker ou loader.
- **Motivo da Proteção no Endereço 0000**: Para evitar a sobreescrita acidental de dados de outros processos, o sistema operacional geralmente evita alocar memória para processos em endereços baixos, como o 0000.

### 3. **Vinculação de Endereços (Linkagem)**

- **Espaço de Endereço Lógico vs. Físico**:
    - **Endereço Lógico**: Gerado pela CPU; também chamado de endereço virtual.
    - **Endereço Físico**: Endereço real na unidade de memória.
    - A Unidade de Gerenciamento de Memória (MMU) é um hardware que converte endereços lógicos em físicos em tempo de execução, facilitando o endereçamento de memória sem interferência entre processos.

### 4. **Carregamento e Linkagem Dinâmica**

- **Carregamento Dinâmico**: Programas são carregados em partes, permitindo que grandes programas (ex: jogos) ocupem menos espaço na memória simultaneamente.
- **Linkagem Dinâmica**:
    - **Vinculação Estática**: Bibliotecas do sistema e código do programa são combinados no momento do carregamento.
    - **Vinculação Dinâmica**: A vinculação de bibliotecas é adiada até o tempo de execução, economizando espaço e facilitando a atualização de bibliotecas.

### 5. **Alocação de Memória**

- **Alocação Contínua**:
    - Memória alocada de forma contínua para o processo, com tamanho fixo, podendo gerar desperdício de espaço.
- **Partição Variável**:
    - A memória é dividida em tamanhos variáveis para acomodar diferentes processos, minimizando fragmentação externa.
    - **Algoritmos de Alocação**:
        - **First-fit**: Aloca o primeiro espaço grande o suficiente.
        - **Best-fit**: Aloca o menor espaço adequado.
        - **Worst-fit**: Aloca o maior espaço disponível (menos eficiente em armazenamento e velocidade).

### 6. **Paginação**

- **Fragmentação Externa**: A paginação resolve a fragmentação externa dividindo a memória em páginas de tamanho fixo.
    - **Memória Principal** é dividida em páginas e **processos** em quadros.
- **Esquema de Tradução de Endereço**:
    - Cada endereço lógico é dividido em **número da página** e **deslocamento da página**.
    - **Exemplo de Cálculo**:
        - Para armazenar um programa de 50 GB em páginas de 2.048 bytes:
            - Total de páginas: 24.414.063\text{24.414.063}24.414.063
            - Memória para armazenar o sumário do processo: quase 200 MB\text{quase 200 MB}quase 200 MB.

### 7. **TLB (Translation Lookaside Buffer)**

- **Propósito**: Acelerar o acesso à tabela de páginas, que ficaria mais lenta sem essa ajuda.
- **Desempenho**: Taxa de acerto na TLB afeta o tempo de acesso efetivo. Exemplo:
    - Taxa de acerto de 80% implica um EAT de 12 ns, enquanto uma taxa de 99% resulta em EAT de 10,1 ns.

### 8. **Estrutura da Tabela de Páginas**

- **Tabelas Hierárquicas**: Divisão da tabela em várias camadas para reduzir o consumo de memória.
- **Tabelas com Hash**: Usadas para endereços de 64 bits, aplicando hashing para localizar endereços mais rapidamente em espaços de memória grandes e dispersos.
- **Tabelas Invertidas**: Cada entrada corresponde a uma página física, economizando memória, mas aumentando o tempo de busca.

### 9. **Swapping (Troca de Processos)**

- **Processos podem ser trocados para a memória secundária** para liberar espaço na memória física. Quando necessário, o processo é carregado novamente para o mesmo endereço físico.
- **Desvantagens em Sistemas Modernos**:
    - **Custo Alto de Tempo**: Trocar um processo de 100 MB para o disco pode levar cerca de 4 segundos.
    - **Restrições**: I/O pendente pode impedir o swapping e o processo de buffer duplo adiciona sobrecarga.